
//Promise, JavaScriptâ€™te bir iÅŸlemin (Ã¶rneÄŸin bir dosya okuma, veri Ã§ekme, vs.) 
// gelecekte tamamlanÄ±p tamamlanmadÄ±ÄŸÄ±nÄ± temsil eden bir sÃ¶z gibidir.

//ğŸ”¹ Neden Promise KullanÄ±lÄ±r?
// Node.jsâ€™te birÃ§ok iÅŸlem (dosya okuma/yazma, veri Ã§ekme, vs.) asenkron Ã§alÄ±ÅŸÄ±r. 
// EÄŸer bunlarÄ± dÃ¼zgÃ¼n bir ÅŸekilde sÄ±raya sokmazsak, kodumuz karÄ±ÅŸÄ±k bir "callback hell"e dÃ¶ner. Promise, bu karmaÅŸayÄ± azaltÄ±r ve okunabilirliÄŸi artÄ±rÄ±r.

function delayFn(time) { // doÄŸru sonuÃ§ verirse resolve dÃ¶ner. hata verirse reject dÃ¶ner
    return new Promise((resolve) => setTimeout(resolve, time))
}

console.log('Promise lecture starts')
delayFn(2000).then(() => console.log('After 2 seconds promise resolved')) // diÄŸer bloklardan baÄŸÄ±msÄ±z olarak 2 saniye gecikmeli olarak dÃ¶nÃ¼t verir.
console.log('End')


function divideFn(num1, num2) {
    return new Promise((resolve, reject) => {
        if (num2 === 0) {
            reject('Can not perform division by 0')
        } else {
            resolve(num1 / num2)
        }
    })
}


divideFn(10, 5)
    .then((result) => console.log(result, "res")) // resolve dÃ¶ndÃ¼ÄŸÃ¼nde burasÄ± Ã§alÄ±ÅŸÄ±r
    .catch((error) => console.log(error, "err")) // reject dÃ¶ndÃ¼ÄŸÃ¼nde burasÄ± Ã§alÄ±ÅŸÄ±r


















